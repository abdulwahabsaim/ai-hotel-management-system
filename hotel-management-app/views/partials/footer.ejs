    </main>
    <footer class="bg-gray-800 text-gray-400 py-8 dark:bg-gray-900">
        <div class="container mx-auto px-4 text-center">
             <p>Â© 2025 AI Hotel Management System. All Rights Reserved.</p>
             <!-- Theme Toggler -->
             <div class="mt-4">
                <button id="theme-toggle" type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5">
                    <i id="theme-toggle-dark-icon" class="hidden fa-solid fa-moon"></i>
                    <i id="theme-toggle-light-icon" class="hidden fa-solid fa-sun"></i>
                </button>
            </div>
        </div>
    </footer>

    <!-- AI CONCIERGE CHAT WIDGET -->
    <%- include('chat-widget') %>

    <!-- Dropdown Controller & Mobile Menu JS -->
    <script>
        // Simple Dropdown Logic
        document.addEventListener('click', function(event) {
            const isDropdownButton = event.target.closest('[data-action="dropdown#toggle"]');
            document.querySelectorAll('[data-dropdown-target="menu"]').forEach(menu => {
                if (!isDropdownButton || !menu.closest('[data-controller="dropdown"]').contains(isDropdownButton)) {
                     menu.classList.add('hidden');
                }
            });
            if (isDropdownButton) {
                const dropdown = isDropdownButton.closest('[data-controller="dropdown"]');
                const menu = dropdown.querySelector('[data-dropdown-target="menu"]');
                menu.classList.toggle('hidden');
            }
        });

        // Mobile Menu Toggle
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        if(mobileMenuButton) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
        }
    </script>

    <!-- Theme Toggle, Animation & CHAT WIDGET Script -->
    <script>
        // --- THEME & ANIMATION LOGIC ---
        const themeToggleBtn = document.getElementById('theme-toggle');
        const lightIcon = document.getElementById('theme-toggle-light-icon');
        const darkIcon = document.getElementById('theme-toggle-dark-icon');
        const applyTheme = (theme) => {
            if (theme === 'dark') {
                document.documentElement.classList.add('dark');
                lightIcon.classList.remove('hidden');
                darkIcon.classList.add('hidden');
            } else {
                document.documentElement.classList.remove('dark');
                darkIcon.classList.remove('hidden');
                lightIcon.classList.add('hidden');
            }
        };
        const currentTheme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        applyTheme(currentTheme);
        themeToggleBtn.addEventListener('click', function() {
            const newTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark';
            localStorage.setItem('color-theme', newTheme);
            applyTheme(newTheme);
        });
        const revealOnScroll = (entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('is-visible'); observer.unobserve(entry.target); } }); };
        const observer = new IntersectionObserver(revealOnScroll, { root: null, rootMargin: '0px', threshold: 0.1 });
        document.querySelectorAll('.reveal-on-scroll').forEach(el => observer.observe(el));

        // --- NEW & IMPROVED CHAT WIDGET LOGIC ---
        document.addEventListener('DOMContentLoaded', () => {
            if (typeof showdown === 'undefined') {
                console.error("Showdown library not loaded.");
                return;
            }
            
            const chatBubble = document.getElementById('chat-bubble');
            const chatWindow = document.getElementById('chat-window');
            const closeChatBtn = document.getElementById('close-chat');
            const chatForm = document.getElementById('chat-form');
            const chatInput = document.getElementById('chat-input');
            const chatMessages = document.getElementById('chat-messages');
            const chatSubmitBtn = document.getElementById('chat-submit');
            const suggestedActionsContainer = document.getElementById('suggested-actions');
            const markdownConverter = new showdown.Converter();

            const initialSuggestions = [
                "Are rooms free next weekend?",
                "Tell me about your suites.",
                "What amenities do you offer?"
            ];

            const toggleChatWindow = () => {
                chatWindow.classList.toggle('hidden');
                if (!chatWindow.classList.contains('hidden')) {
                    renderSuggestedActions(initialSuggestions);
                    chatInput.focus();
                }
            };
            
            chatBubble.addEventListener('click', toggleChatWindow);
            closeChatBtn.addEventListener('click', toggleChatWindow);

            chatForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const message = chatInput.value.trim();
                if (message) {
                    sendMessage(message);
                }
            });
            
            suggestedActionsContainer.addEventListener('click', (e) => {
                if (e.target.tagName === 'BUTTON') {
                    sendMessage(e.target.textContent);
                }
            });

            // ====================================================================
            // THIS IS THE NEW, SIMPLIFIED FUNCTION FOR A STANDARD JSON RESPONSE
            // ====================================================================
            function sendMessage(message) {
                addMessage(message, 'user');
                chatInput.value = '';
                setLoading(true);
                clearSuggestedActions();

                fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => Promise.reject(err));
                    }
                    return response.json();
                })
                .then(data => {
                    addMessage(data.reply, 'ai');
                })
                .catch(error => {
                    addMessage(`**Error:** ${error.error || 'An unknown error occurred.'}`, 'ai');
                })
                .finally(() => {
                    setLoading(false);
                    renderSuggestedActions(initialSuggestions);
                });
            }

            function addMessage(text, sender) {
                const messageFlex = document.createElement('div');
                messageFlex.className = 'flex';
                if (sender === 'user') messageFlex.classList.add('justify-end');

                const bubble = document.createElement('div');
                bubble.className = sender === 'user' ? 'chat-bubble-user' : 'chat-bubble-ai';
                // Use innerHTML to render markdown correctly
                bubble.innerHTML = markdownConverter.makeHtml(text);
                
                messageFlex.appendChild(bubble);
                chatMessages.appendChild(messageFlex);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function setLoading(isLoading) {
                chatInput.disabled = isLoading;
                chatSubmitBtn.disabled = isLoading;
                if (isLoading) {
                    const typingIndicator = `
                        <div class="flex" id="typing-indicator">
                            <div class="chat-bubble-ai typing-indicator">
                                <span></span><span></span><span></span>
                            </div>
                        </div>`;
                    chatMessages.insertAdjacentHTML('beforeend', typingIndicator);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                } else {
                    const indicator = document.getElementById('typing-indicator');
                    if (indicator) indicator.remove();
                }
            }
            
            function renderSuggestedActions(actions) {
                clearSuggestedActions();
                actions.forEach(action => {
                    const button = document.createElement('button');
                    button.className = 'px-3 py-1.5 text-sm text-blue-700 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/50 rounded-full hover:bg-blue-200 dark:hover:bg-blue-900 transition-colors';
                    button.textContent = action;
                    suggestedActionsContainer.appendChild(button);
                });
            }

            function clearSuggestedActions() {
                suggestedActionsContainer.innerHTML = '';
            }
        });
    </script>
</body>
</html>