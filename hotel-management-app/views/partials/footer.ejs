    </main>
    <footer class="bg-gray-800 text-gray-400 py-8 dark:bg-gray-900">
        <div class="container mx-auto px-4 text-center">
             <p>Â© 2025 AI Hotel Management System. All Rights Reserved.</p>
        </div>
    </footer>

    <%- include('chat-widget') %>

    <script>
        // --- DROPDOWN & MOBILE MENU LOGIC (runs immediately) ---
        document.addEventListener('click', function(event) {
            const isDropdownButton = event.target.closest('[data-action="dropdown#toggle"]');
            document.querySelectorAll('[data-dropdown-target="menu"]').forEach(menu => {
                if (!isDropdownButton || !menu.closest('[data-controller="dropdown"]').contains(isDropdownButton)) {
                     menu.classList.add('hidden');
                }
            });
            if (isDropdownButton) {
                const dropdown = isDropdownButton.closest('[data-controller="dropdown"]');
                const menu = dropdown.querySelector('[data-dropdown-target="menu"]');
                menu.classList.toggle('hidden');
            }
        });
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        if(mobileMenuButton) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
        }

        // --- SCRIPTS THAT RUN AFTER THE DOM IS FULLY LOADED ---
        document.addEventListener('DOMContentLoaded', () => {
            // 1. THEME TOGGLE LOGIC
            const themeToggleBtns = document.querySelectorAll('.theme-toggle-btn');
            const lightIcons = document.querySelectorAll('.theme-toggle-light-icon');
            const darkIcons = document.querySelectorAll('.theme-toggle-dark-icon');

            const applyTheme = (theme) => {
                if (theme === 'dark') {
                    document.documentElement.classList.add('dark');
                    lightIcons.forEach(icon => icon.classList.remove('hidden'));
                    darkIcons.forEach(icon => icon.classList.add('hidden'));
                } else {
                    document.documentElement.classList.remove('dark');
                    darkIcons.forEach(icon => icon.classList.remove('hidden'));
                    lightIcons.forEach(icon => icon.classList.add('hidden'));
                }
            };

            const currentTheme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            applyTheme(currentTheme);

            themeToggleBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const newTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark';
                    localStorage.setItem('color-theme', newTheme);
                    applyTheme(newTheme);
                });
            });
            
            // 2. SCROLL ANIMATION LOGIC
            const revealOnScroll = (entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('is-visible'); observer.unobserve(entry.target); } }); };
            const observer = new IntersectionObserver(revealOnScroll, { root: null, rootMargin: '0px', threshold: 0.1 });
            document.querySelectorAll('.reveal-on-scroll').forEach(el => observer.observe(el));

            // 3. **RESTORED & COMPLETE** CHAT WIDGET LOGIC
            if (typeof showdown !== 'undefined') {
                const chatBubble = document.getElementById('chat-bubble');
                const chatBubbleIcon = document.getElementById('chat-bubble-icon');
                const chatBubbleCloseIcon = document.getElementById('chat-bubble-close-icon');
                const chatWindow = document.getElementById('chat-window');
                const chatContainer = document.getElementById('chat-container');
                const closeChatBtn = document.getElementById('close-chat');
                const chatForm = document.getElementById('chat-form');
                const chatInput = document.getElementById('chat-input');
                const chatMessages = document.getElementById('chat-messages');
                const chatSubmitBtn = document.getElementById('chat-submit');
                const suggestedActionsContainer = document.getElementById('suggested-actions');
                const markdownConverter = new showdown.Converter();
                let conversationHistory = [];
                const initialSuggestions = ["Are rooms free next weekend?", "Tell me about your suites.", "What amenities do you offer?"];

                const toggleChatWindow = () => {
                    const isHidden = chatWindow.classList.contains('hidden');
                    if (isHidden) {
                        chatWindow.classList.remove('hidden');
                        chatContainer.classList.add('chat-enter-active');
                        chatContainer.classList.remove('chat-leave-active');
                        chatBubbleIcon.style.opacity = '0'; chatBubbleIcon.style.transform = 'rotate(-90deg) scale(0.8)';
                        chatBubbleCloseIcon.style.opacity = '1'; chatBubbleCloseIcon.style.transform = 'rotate(0deg) scale(1)';
                        if (chatMessages.children.length <= 1) { renderSuggestedActions(initialSuggestions); }
                        chatInput.focus();
                    } else {
                        chatContainer.classList.remove('chat-enter-active');
                        chatContainer.classList.add('chat-leave-active');
                        chatBubbleIcon.style.opacity = '1'; chatBubbleIcon.style.transform = 'rotate(0deg) scale(1)';
                        chatBubbleCloseIcon.style.opacity = '0'; chatBubbleCloseIcon.style.transform = 'rotate(90deg) scale(0.8)';
                        setTimeout(() => chatWindow.classList.add('hidden'), 300);
                    }
                };
                
                chatBubble.addEventListener('click', toggleChatWindow);
                closeChatBtn.addEventListener('click', toggleChatWindow);

                chatInput.addEventListener('input', () => {
                    if(chatInput.value.trim().length > 0) {
                        chatSubmitBtn.classList.remove('opacity-50', 'scale-90', 'cursor-not-allowed');
                        chatSubmitBtn.classList.add('opacity-100', 'scale-100');
                    } else {
                        chatSubmitBtn.classList.add('opacity-50', 'scale-90', 'cursor-not-allowed');
                        chatSubmitBtn.classList.remove('opacity-100', 'scale-100');
                    }
                });

                chatForm.addEventListener('submit', (e) => { e.preventDefault(); if (chatInput.value.trim()) sendMessage(chatInput.value.trim()); });
                suggestedActionsContainer.addEventListener('click', (e) => { if (e.target.tagName === 'BUTTON') sendMessage(e.target.textContent); });

                function sendMessage(message) {
                    addMessage(message, 'user');
                    chatInput.value = '';
                    chatInput.dispatchEvent(new Event('input'));
                    setLoading(true);
                    clearSuggestedActions();
                    fetch('/api/chat', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ message, history: conversationHistory }) })
                    .then(res => res.ok ? res.json() : res.json().then(err => Promise.reject(err)))
                    .then(data => {
                        addMessage(data.reply, 'ai');
                        conversationHistory.push({ role: 'assistant', content: data.reply });
                    })
                    .catch(error => addMessage(`**Error:** ${error.error || 'An unknown error occurred.'}`, 'ai'))
                    .finally(() => setLoading(false));
                }

                function addMessage(text, sender) {
                    if (sender === 'user') conversationHistory.push({ role: 'user', content: text });
                    const msgDiv = document.createElement('div');
                    msgDiv.className = `flex items-end gap-2.5 animate-fade-in-up ${sender === 'user' ? 'justify-end' : ''}`;
                    const avatar = `<div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${sender === 'user' ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300' : 'bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300'}"><i class="fa-solid ${sender === 'user' ? 'fa-user' : 'fa-robot'}"></i></div>`;
                    const bubble = `<div class="${sender === 'user' ? 'chat-bubble-user' : 'chat-bubble-ai'}">${markdownConverter.makeHtml(text)}</div>`;
                    msgDiv.innerHTML = sender === 'user' ? bubble + avatar : avatar + bubble;
                    chatMessages.appendChild(msgDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                function setLoading(isLoading) {
                    chatInput.disabled = isLoading;
                    chatSubmitBtn.disabled = isLoading;
                    const indicator = document.getElementById('typing-indicator');
                    if (isLoading && !indicator) {
                        const typingHTML = `<div class="flex items-end gap-2.5 animate-fade-in-up" id="typing-indicator"><div class="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center flex-shrink-0"><i class="fa-solid fa-robot text-gray-600 dark:text-gray-300"></i></div><div class="chat-bubble-ai typing-indicator"><span></span><span></span><span></span></div></div>`;
                        chatMessages.insertAdjacentHTML('beforeend', typingHTML);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    } else if (!isLoading && indicator) {
                        indicator.remove();
                    }
                }
                
                function renderSuggestedActions(actions) {
                    clearSuggestedActions();
                    actions.forEach(action => {
                        const button = document.createElement('button');
                        button.className = 'px-3 py-1.5 text-sm text-blue-700 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/50 rounded-full hover:bg-blue-200 dark:hover:bg-blue-900 transition-colors animate-fade-in-up';
                        button.textContent = action;
                        suggestedActionsContainer.appendChild(button);
                    });
                }
                function clearSuggestedActions() { suggestedActionsContainer.innerHTML = ''; }
            } else {
                console.error("Showdown library not loaded, chat widget disabled.");
            }
        });
    </script>
</body>
</html>